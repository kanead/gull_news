appraise(gam_mod3)
count_data
# GAM analysis of newspaper articles over time
# 4th March 2024
# clear everything
rm(list=ls())
graphics.off()
# load libraries
library(tidyverse)
library(mgcv)
library(gratia)
library(DHARMa)
# load the data
mydata <- read_csv("Combined_wDoubles_Nov15.csv")
# check it out
head(mydata)
glimpse(mydata)
head(mydata$Date)
# make sure country is set as a factor
mydata$Country <- as.factor(mydata$Country)
# transform the date column into a date class
mydata$Date <- as.POSIXct(mydata$Date, format = "%d/%m/%Y")
head(mydata$Date)
# transform the dates to use in the model
# mydata <- transform(
#   mydata,
#   ndate = as.numeric(Date),
#   nyear  = as.numeric(format(Date, '%Y')),
#   nmonth = as.numeric(format(Date, '%m')),
#   doy    = as.numeric(format(Date, '%j'))
# )
# check it worked
# mydata$doy
# head(mydata)
# group the data by year, month and country, then count how many occurrences per group
# check this manually if it makes sense
count_data <- mydata %>%
group_by(Year, Month, Country) %>%
summarise(count = n()) %>% arrange(Country, Year, Month)
count_data
# account for year of the gull
count_data <-
count_data %>% mutate(special = if_else(Year == "2015", "yes", "no"))
# account for larger countries producing more articles by adding the population size
count_data <- count_data %>%
mutate(
population = case_when(
Country == "England"  ~ 53,
Country == "Ireland"  ~ 5.1,
Country == "Northern Ireland"  ~ 1.8,
Country == "Scotland"  ~ 5.3,
Country == "Wales"  ~ 3
)
)
# fit the GAM
# one interaction with month but not with year
gam_mod2 <-
gam(
count ~ s(Year, k = 30) +
s(Month, k = 12, bs = "cc", by = Country) +
Country + special,
# potentially need to control for larger countries producing
#  more articles
offset = log(population),
family = nb,
# other options for the family argument
# family = quasipoisson(),
# family = poisson,
method = "REML",
data = count_data
)
# plot the model outputs on the original scale by taking the exponential
# negative binomial family (nb) works on the log scale
plot(gam_mod2, residuals = TRUE, pch=1, cex=1, seWithMean = TRUE,
shift = coef(gam_mod2)[1],
trans = exp)
# fit the GAM
# two interactions, country with year and with month
gam_mod1 <-
gam(
count ~ s(Year, k = 30, by = Country) +
s(Month, k = 12, bs = "cc", by = Country) +
Country + special,
# potentially need to control for larger countries producing
#  more articles
offset = log(population),
family = nb,
# other options for the family argument
# family = quasipoisson(),
# family = poisson,
method = "REML",
data = count_data
)
# plot the model outputs on the original scale by taking the exponential
# negative binomial family (nb) works on the log scale
plot(gam_mod1, residuals = TRUE, pch=1, cex=1, seWithMean = TRUE,
shift = coef(gam_mod1)[1],
trans = exp)
plot(gam1)
plot(gam_mod1)
log(-5)
exp(-5)
exp(-15)
exp(5)
max(count_data$count)
hist(count_data$count)
summary(gam_mod1)
# remove the extremes to check the effect
count_data <- count_data %>% filter(count < 100)
# fit the GAM
# two interactions, country with year and with month
gam_mod1 <-
gam(
count ~ s(Year, k = 30, by = Country) +
s(Month, k = 12, bs = "cc", by = Country) +
Country,# + special,
# potentially need to control for larger countries producing
#  more articles
offset = log(population),
family = nb,
# other options for the family argument
# family = quasipoisson(),
# family = poisson,
method = "REML",
data = count_data
)
# check how the model went
summary(gam_mod1)
plot(gam_mod1)
# plot the model outputs on the original scale by taking the exponential
# negative binomial family (nb) works on the log scale
plot(gam_mod1, residuals = TRUE, pch=1, cex=1, seWithMean = TRUE,
shift = coef(gam_mod1)[1],
trans = exp)
# group the data by year, month and country, then count how many occurrences per group
# check this manually if it makes sense
count_data <- mydata %>%
group_by(Year, Month, Country) %>%
summarise(count = n()) %>% arrange(Country, Year, Month)
count_data
# subset to after 1990
count_data90s <- count_data %>% filter(Year > 1999)
# fit the GAM
# one interaction with year but not with month
gam_mod6 <-
gam(
count ~ s(Year, k = 30,  by = Country) +
s(Month, k = 12, bs = "cc") +
Country + special,
# potentially need to control for larger countries producing
#  more articles
offset = log(population),
family = nb,
# other options for the family argument
# family = quasipoisson(),
# family = poisson,
method = "REML",
data = count_data90s
)
# account for year of the gull
count_data <-
count_data %>% mutate(special = if_else(Year == "2015", "yes", "no"))
896/1015
# fit the GAM
# one interaction with year but not with month
gam_mod6 <-
gam(
count ~ s(Year, k = 30,  by = Country) +
s(Month, k = 12, bs = "cc") +
Country + special,
# potentially need to control for larger countries producing
#  more articles
offset = log(population),
family = nb,
# other options for the family argument
# family = quasipoisson(),
# family = poisson,
method = "REML",
data = count_data90s
)
# subset to after 1990
count_data90s <- count_data %>% filter(Year > 1999)
# fit the GAM
# one interaction with year but not with month
gam_mod6 <-
gam(
count ~ s(Year, k = 30,  by = Country) +
s(Month, k = 12, bs = "cc") +
Country + special,
# potentially need to control for larger countries producing
#  more articles
offset = log(population),
family = nb,
# other options for the family argument
# family = quasipoisson(),
# family = poisson,
method = "REML",
data = count_data90s
)
# fit the GAM
# no interactions with country
gam_mod4 <-
gam(
count ~ s(Year, k = 30) +
s(Month, k = 12, bs = "cc") +
Country + special,
# potentially need to control for larger countries producing
#  more articles
offset = log(population),
family = nb,
# other options for the family argument
# family = quasipoisson(),
# family = poisson,
method = "REML",
data = count_data
)
count_data
# clear everything
rm(list=ls())
graphics.off()
# load the data
mydata <- read_csv("Combined_wDoubles_Nov15.csv")
# make sure country is set as a factor
mydata$Country <- as.factor(mydata$Country)
# transform the date column into a date class
mydata$Date <- as.POSIXct(mydata$Date, format = "%d/%m/%Y")
head(mydata$Date)
# group the data by year, month and country, then count how many occurrences per group
# check this manually if it makes sense
count_data <- mydata %>%
group_by(Year, Month, Country) %>%
summarise(count = n()) %>% arrange(Country, Year, Month)
count_data
# account for year of the gull
count_data <-
count_data %>% mutate(special = if_else(Year == "2015", "yes", "no"))
# account for larger countries producing more articles by adding the population size
count_data <- count_data %>%
mutate(
population = case_when(
Country == "England"  ~ 53,
Country == "Ireland"  ~ 5.1,
Country == "Northern Ireland"  ~ 1.8,
Country == "Scotland"  ~ 5.3,
Country == "Wales"  ~ 3
)
)
# fit the GAM
# one interaction with year but not with month
gam_mod6 <-
gam(
count ~ s(Year, k = 30,  by = Country) +
s(Month, k = 12, bs = "cc") +
Country + special,
# potentially need to control for larger countries producing
#  more articles
offset = log(population),
family = nb,
# other options for the family argument
# family = quasipoisson(),
# family = poisson,
method = "REML",
data = count_data90s
)
# subset to after some point
count_data90s <- count_data %>% filter(Year > 1999)
# fit the GAM
# one interaction with year but not with month
gam_mod6 <-
gam(
count ~ s(Year, k = 30,  by = Country) +
s(Month, k = 12, bs = "cc") +
Country + special,
# potentially need to control for larger countries producing
#  more articles
offset = log(population),
family = nb,
# other options for the family argument
# family = quasipoisson(),
# family = poisson,
method = "REML",
data = count_data90s
)
table(count_data90s)
table(count_data90s$Country)
# fit the GAM
# one interaction with year but not with month
gam_mod6 <-
gam(
count ~ s(Year,  by = Country) +
s(Month, bs = "cc") +
Country + special,
# potentially need to control for larger countries producing
#  more articles
offset = log(population),
family = nb,
# other options for the family argument
# family = quasipoisson(),
# family = poisson,
method = "REML",
data = count_data90s
)
# take a look at it
# check how the model went
summary(gam_mod6)
plot(gam_mod6)
gam.check(gam_mod6)
# plot the model outputs on the original scale by taking the exponential
# negative binomial family (nb) works on the log scale
plot(gam_mod6, residuals = TRUE, pch=1, cex=1, seWithMean = TRUE,
shift = coef(gam_mod6)[1],
trans = exp)
count_data
count_data %>% print(n = 100)
appraise(gam_mod6)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
# load libraries
library(tidyverse)
library(mgcv)
library(gratia)
library(DHARMa)
appraise(gam_mod6)
# fit the GAM
# one interaction with year but not with month
gam_mod3 <-
gam(
count ~ s(Year, k = 30,  by = Country) +
s(Month, k = 12, bs = "cc") +
Country + special,
# potentially need to control for larger countries producing
#  more articles
offset = log(population),
family = nb,
# other options for the family argument
# family = quasipoisson(),
# family = poisson,
method = "REML",
data = count_data
)
# take a look at it
# check how the model went
summary(gam_mod3)
plot(gam_mod3)
gam.check(gam_mod3)
# plot the model outputs on the original scale by taking the exponential
# negative binomial family (nb) works on the log scale
# this looks weird because of the huge uncertainty in earlier years when
# we don't have much data to go on
plot(gam_mod3, residuals = TRUE, pch=1, cex=1, seWithMean = TRUE,
shift = coef(gam_mod3)[1],
trans = exp)
# plot the model outputs on the original scale by taking the exponential
# negative binomial family (nb) works on the log scale
# this looks weird because of the huge uncertainty in earlier years when
# we don't have much data to go on
plot(gam_mod3, residuals = TRUE, pch=1, cex=1, seWithMean = TRUE,
shift = coef(gam_mod3)[1],
trans = exp, ylim = 100)
# plot the model outputs on the original scale by taking the exponential
# negative binomial family (nb) works on the log scale
# this looks weird because of the huge uncertainty in earlier years when
# we don't have much data to go on
plot(gam_mod3, residuals = TRUE, pch=1, cex=1, seWithMean = TRUE,
# plot the model outputs on the original scale by taking the exponential
# negative binomial family (nb) works on the log scale
# this looks weird because of the huge uncertainty in earlier years when
# we don't have much data to go on
plot(gam_mod3, residuals = TRUE, pch=1, cex=1, seWithMean = TRUE,
shift = coef(gam_mod3)[1],
trans = exp, ylim = c(0,100))
# plot the model outputs on the original scale by taking the exponential
# negative binomial family (nb) works on the log scale
# this looks weird because of the huge uncertainty in earlier years when
# we don't have much data to go on
plot(gam_mod3, residuals = TRUE, pch=1, cex=1, seWithMean = TRUE,
shift = coef(gam_mod3)[1],
trans = exp, ylim = c(0,5))
# subset to after some point
count_data90s <- count_data %>% filter(Year > 1999)
# fit the GAM
# one interaction with year but not with month
gam_mod6 <-
gam(
count ~ s(Year,  by = Country) +
s(Month, bs = "cc") +
Country + special,
# potentially need to control for larger countries producing
#  more articles
offset = log(population),
family = nb,
# other options for the family argument
# family = quasipoisson(),
# family = poisson,
method = "REML",
data = count_data90s
)
# take a look at it
# check how the model went
summary(gam_mod6)
plot(gam_mod6)
# plot the model outputs on the original scale by taking the exponential
# negative binomial family (nb) works on the log scale
plot(gam_mod6, residuals = TRUE, pch=1, cex=1, seWithMean = TRUE,
shift = coef(gam_mod6)[1],
trans = exp)
exp(1)
exp(-3)
exp(-1)
# fit the GAM
# one interaction with year but not with month
gam_mod6 <-
gam(
count ~ s(Year,  by = Country) +
s(Month, bs = "cc") +
Country + special,
# potentially need to control for larger countries producing
#  more articles
#  offset = log(population),
# family = nb,
# other options for the family argument
# family = quasipoisson(),
# family = poisson,
method = "REML",
data = count_data90s
)
# take a look at it
# check how the model went
summary(gam_mod6)
plot(gam_mod6)
plot(count_data$count~count_data$Year)
# fit the GAM
# one interaction with year but not with month
gam_mod6 <-
gam(
count ~ s(Year,  by = Country, k = 20) +
s(Month, bs = "cc") +
Country + special,
# potentially need to control for larger countries producing
#  more articles
offset = log(population),
family = nb,
# other options for the family argument
# family = quasipoisson(),
# family = poisson,
method = "REML",
data = count_data90s
)
# take a look at it
# check how the model went
summary(gam_mod6)
plot(gam_mod6)
gam.check(gam_mod6)
# clear everything
rm(list=ls())
graphics.off()
# load libraries
library(tidyverse)
library(mgcv)
library(gratia)
library(DHARMa)
# load the data
mydata <- read_csv("Combined_wDoubles_Nov15.csv")
# check it out
head(mydata)
glimpse(mydata)
head(mydata$Date)
# make sure country is set as a factor
mydata$Country <- as.factor(mydata$Country)
# transform the date column into a date class
mydata$Date <- as.POSIXct(mydata$Date, format = "%d/%m/%Y")
head(mydata$Date)
# group the data by year, month and country, then count how many occurrences per group
# check this manually if it makes sense
count_data <- mydata %>%
group_by(Year, Month, Country) %>%
summarise(count = n()) %>% arrange(Country, Year, Month)
count_data
# account for year of the gull
count_data <-
count_data %>% mutate(special = if_else(Year == "2015", "yes", "no"))
# account for larger countries producing more articles by adding the population size
count_data <- count_data %>%
mutate(
population = case_when(
Country == "England"  ~ 53,
Country == "Ireland"  ~ 5.1,
Country == "Northern Ireland"  ~ 1.8,
Country == "Scotland"  ~ 5.3,
Country == "Wales"  ~ 3
)
)
# fit the GAM
# two interactions, country with year and with month
gam_mod1 <-
gam(
count ~ s(Year, k = 30, by = Country) +
s(Month, k = 12, bs = "cc", by = Country) +
Country + special,
# potentially need to control for larger countries producing
#  more articles
offset = log(population),
family = nb,
# other options for the family argument
# family = quasipoisson(),
# family = poisson,
method = "REML",
data = count_data
)
count_data
plot(gam_mod1)
